{"ast":null,"code":"import{createRoot}from'react-dom/client';import{withAuthInfo}from'@propelauth/react';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";function NavigationBar(){// TODO: Actually implement a navigation bar\nconst YourApp=withAuthInfo(props=>{// isLoggedIn and user are injected automatically from withAuthInfo\nif(props.isLoggedIn){return/*#__PURE__*/_jsxs(\"p\",{children:[\"You are logged in as \",props.user.email]});}else{return/*#__PURE__*/_jsx(\"p\",{children:\"You are not logged in\"});}});}const domNode=document.getElementById('navigation');const root=createRoot(domNode);root.render(/*#__PURE__*/_jsx(NavigationBar,{}));","map":{"version":3,"names":["createRoot","withAuthInfo","jsxs","_jsxs","jsx","_jsx","NavigationBar","YourApp","props","isLoggedIn","children","user","email","domNode","document","getElementById","root","render"],"sources":["/Users/violinmeiling/dev/myhealthpassport/src/index.js"],"sourcesContent":["import { createRoot } from 'react-dom/client';\nimport { withAuthInfo } from '@propelauth/react';\n\nfunction NavigationBar() {\n  // TODO: Actually implement a navigation bar\n  const YourApp = withAuthInfo((props) => {\n    // isLoggedIn and user are injected automatically from withAuthInfo\n    if (props.isLoggedIn) {\n        return <p>You are logged in as {props.user.email}</p>\n    } else {\n        return <p>You are not logged in</p>\n    }\n})\n}\n\nconst domNode = document.getElementById('navigation');\nconst root = createRoot(domNode);\nroot.render(<NavigationBar />);"],"mappings":"AAAA,OAASA,UAAU,KAAQ,kBAAkB,CAC7C,OAASC,YAAY,KAAQ,mBAAmB,CAAC,OAAAC,IAAA,IAAAC,KAAA,CAAAC,GAAA,IAAAC,IAAA,yBAEjD,QAAS,CAAAC,aAAaA,CAAA,CAAG,CACvB;AACA,KAAM,CAAAC,OAAO,CAAGN,YAAY,CAAEO,KAAK,EAAK,CACtC;AACA,GAAIA,KAAK,CAACC,UAAU,CAAE,CAClB,mBAAON,KAAA,MAAAO,QAAA,EAAG,uBAAqB,CAACF,KAAK,CAACG,IAAI,CAACC,KAAK,EAAI,CAAC,CACzD,CAAC,IAAM,CACH,mBAAOP,IAAA,MAAAK,QAAA,CAAG,uBAAqB,CAAG,CAAC,CACvC,CACJ,CAAC,CAAC,CACF,CAEA,KAAM,CAAAG,OAAO,CAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CACrD,KAAM,CAAAC,IAAI,CAAGhB,UAAU,CAACa,OAAO,CAAC,CAChCG,IAAI,CAACC,MAAM,cAACZ,IAAA,CAACC,aAAa,GAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}