{"ast":null,"code":"var _jsxFileName = \"/Users/violinmeiling/dev/myhealthpassport/src/Calendar.js\";\nimport React from 'react';\nimport './Calendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = ({\n  medications,\n  onMedicationClick\n}) => {\n  // Generate the calendar for the next 7 days\n  const days = Array.from({\n    length: 7\n  }, (_, i) => {\n    const date = new Date();\n    date.setDate(date.getDate() + i);\n    return date.toLocaleDateString();\n  });\n\n  // Define times for each hour of the day (12 AM to 11 PM)\n  const times = Array.from({\n    length: 24\n  }, (_, i) => {\n    const hour = i % 12 || 12;\n    const period = i < 12 ? 'AM' : 'PM';\n    return `${hour} ${period}`;\n  });\n\n  // Check if medications is defined and not empty\n  if (!medications || medications.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No medications available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Create a map for each day to hold medications at each time\n  const schedule = {};\n  days.forEach(day => {\n    schedule[day] = Array.from({\n      length: 24\n    }, () => []);\n  });\n\n  // Fill the schedule based on medication frequency\n  medications.forEach(medication => {\n    const timesToTake = Array.from({\n      length: medication.frequency\n    }, (_, index) => {\n      return getTimeSlot(index);\n    });\n    days.forEach(day => {\n      timesToTake.forEach(time => {\n        schedule[day][time].push(medication);\n      });\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weekly-calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Weekly Schedule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"calendar-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), days.map(day => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: day\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: times.map((time, timeIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), days.map((day, dayIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"medication-cell\",\n            children: [schedule[day][timeIndex].map((medication, medIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"medication-schedule\",\n              onClick: () => onMedicationClick(medication),\n              children: [medication.name, \" (\", medication.dosage, \")\"]\n            }, medIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 21\n            }, this)), schedule[day][timeIndex].length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"empty-cell\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 21\n            }, this)]\n          }, dayIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this))]\n        }, timeIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to get the time slot index based on the index (customize as needed)\n_c = Calendar;\nconst getTimeSlot = index => {\n  // Example times; adjust based on your desired schedule\n  const times = [8, 13, 20]; // Corresponding to 8 AM, 1 PM, and 8 PM\n  return times[index] || 0; // Fallback for additional times, defaults to 12 AM\n};\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Calendar","medications","onMedicationClick","days","Array","from","length","_","i","date","Date","setDate","getDate","toLocaleDateString","times","hour","period","children","fileName","_jsxFileName","lineNumber","columnNumber","schedule","forEach","day","medication","timesToTake","frequency","index","getTimeSlot","time","push","className","map","timeIndex","dayIndex","medIndex","onClick","name","dosage","_c","$RefreshReg$"],"sources":["/Users/violinmeiling/dev/myhealthpassport/src/Calendar.js"],"sourcesContent":["import React from 'react';\nimport './Calendar.css';\n\nconst Calendar = ({ medications, onMedicationClick }) => {\n  // Generate the calendar for the next 7 days\n  const days = Array.from({ length: 7 }, (_, i) => {\n    const date = new Date();\n    date.setDate(date.getDate() + i);\n    return date.toLocaleDateString();\n  });\n\n  // Define times for each hour of the day (12 AM to 11 PM)\n  const times = Array.from({ length: 24 }, (_, i) => {\n    const hour = i % 12 || 12;\n    const period = i < 12 ? 'AM' : 'PM';\n    return `${hour} ${period}`;\n  });\n\n  // Check if medications is defined and not empty\n  if (!medications || medications.length === 0) {\n    return <div>No medications available.</div>;\n  }\n\n  // Create a map for each day to hold medications at each time\n  const schedule = {};\n  days.forEach(day => {\n    schedule[day] = Array.from({ length: 24 }, () => []);\n  });\n\n  // Fill the schedule based on medication frequency\n  medications.forEach(medication => {\n    const timesToTake = Array.from({ length: medication.frequency }, (_, index) => {\n      return getTimeSlot(index);\n    });\n    \n    days.forEach(day => {\n      timesToTake.forEach(time => {\n        schedule[day][time].push(medication);\n      });\n    });\n  });\n\n  return (\n    <div className=\"weekly-calendar\">\n      <h2>Weekly Schedule</h2>\n      <table className=\"calendar-table\">\n        <thead>\n          <tr>\n            <th>Time</th>\n            {days.map(day => (\n              <th key={day}>{day}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {times.map((time, timeIndex) => (\n            <tr key={timeIndex}>\n              <td>{time}</td>\n              {days.map((day, dayIndex) => (\n                <td key={dayIndex} className=\"medication-cell\">\n                  {schedule[day][timeIndex].map((medication, medIndex) => (\n                    <div \n                      key={medIndex} \n                      className=\"medication-schedule\"\n                      onClick={() => onMedicationClick(medication)}\n                    >\n                      {medication.name} ({medication.dosage})\n                    </div>\n                  ))}\n                  {/* Keep the height of the cell consistent */}\n                  {schedule[day][timeIndex].length === 0 && (\n                    <div className=\"empty-cell\"></div>\n                  )}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n// Function to get the time slot index based on the index (customize as needed)\nconst getTimeSlot = (index) => {\n  // Example times; adjust based on your desired schedule\n  const times = [8, 13, 20]; // Corresponding to 8 AM, 1 PM, and 8 PM\n  return times[index] || 0; // Fallback for additional times, defaults to 12 AM\n};\n\nexport default Calendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}